##inheritance
styling bersifat inheritance properti, pada style baik itu class atau pun tag yang dilakukan styling.

#rule Order
order pada css mengalir seperti katanya cascading. 

#selector basic
1. Type Selector -> span, div,dll
2. Class Selector -> .class, .container
3. ID Selector -> hanya satu, contoh : #special,dll (dimulai dengan #)
4. Attribute Selector ->Attribute selector merupakan cara menetapkan target elemen berdasarkan sebuah atribut yang digunakan atau bahkan bisa lebih spesifik dengan nilainya. 

    <!doctype html>
    <html lang="en">
    <head>
    <title>Judul Dokumen</title>
    <style>
    
        /* <a> element yang menerapkan href attribut */
        a[href] {
            color: blue;
        }
    
        /* <a> element yang menerapkan nilai pada href dengan awalan "#" */
        a[href^="#"] {
            background-color: gold;
        }
    
        /* <a> element yang menerapkan nilai pada href yang mengandung teks "example" */
        a[href*="example"] {
            background-color: silver;
        }
    
        /* <a> element yang menerapkan nilai pada href yang mengandung teks "insensitive" tidak mementingkan huruf kapital*/
        a[href*="insensitive" i] {
            color: cyan;
        }
    
        /* <a> element yang menerapkan nilai pada href dengan akhiran ".org" */
        a[href$=".org"] {
            color: red;
        }
    </style>
    </head>
    <body>
    <ul>
    <ul>
        <li><a href="#internal">Internal link</a></li>
        <li><a href="http://example.com">Example link</a></li>
        <li><a href="#InSensitive">Insensitive internal link</a></li>
        <li><a href="http://example.org">Example org link</a></li>
    </ul>
    </ul>
    </body>
    </html>


5. Universal Selector -> atribute * (untuk semua elemen)

    <!doctype html>
    <html lang="id">
    <head>
    <title>Judul Dokumen</title>
    <style>
        /* Menargetkan seluruh tipe elemen */
        * {
            color: green;
        }
    /* Menargetkan seluruh tipe elemen yang mengandung nilai "en" pada atribut lang */
    
        *[lang^=en] {
            font-style: italic;
        }
    
        /* Menargetkan seluruh tipe elemen yang memiliki nilai "warning" pada atribut class */
        *.warning {
            color: red;
        }
    
        /* Menargetkan seluruh tipe elemen yang memiliki nilai "content" pada atribut id */
        *#content {
            border: 1px solid blue;
            padding: 20px;
        }
    
    </style>
    </head>
    <body>
    <p>Ini merupakan paragraf biasa atau tidak menerapkan atribut apapun. Maka teks pada paragraf ini akan berwarna
    hijau</p>
    <p lang="en-us">This is an English paragraph contains en-us value of lang attribute, so this text will be green and
    italic.</p>
    
    <h1>Ini merupakan sebuah header biasa</h1>
    <h1 lang="en-us">This is an English Header</h1>
    
    <p class="warning">Perhatikan paragraf ini! Paragraf ini merupakan paragraf yang memiliki kelas bernilai warning,
    sehingga teks dari paragraf ini akan berwarna merah</p>
    
    <div id="content">
    <p>Ini merupakan sebuah teks di dalam sebuah div yang memiliki id bernilai "content", seharusnya paragraf ini
        dibungkus dalam border yang memiliki padding 20px</p>
    </div>
    </body>
    </html>


combinators 

adjacent sibling selector (+) -> Adjacent Sibling Selector menggabungkan dua buah basic selector dengan menggunakan tanda + di antara keduanya. ( img + p{ color : green;})

general sibling selector (~) -> di tetapkan utuk setiap elemen setelah sibling yang pertama ( img ~ p{ color : green;})

child selector (>) -> contoh : div > p , artinya rule akan di aplikasikan pada setiap elemen p yang merupakan child secara langsung dari div elemen.

descendant selector (space) -> contoh : div p { color : green;} -> mirip dengan child selector namun mencangkup seluruh p yang merupakan turunan dari div baik secara langsung maupun tidak langsung.

pseudo selector (:)-> selector ini menargetkan elemen pada bagian yang tidak terlihat seperti sifat pada elemen, untuk menerapkannya kita tidak dapat menggunakan selector yang biasa.

    a:hover{
        color:blue;
    }

pseudo class selector -> pseudo class merupakan class semu yang sebenernya dimiliki oleh setiap elemen html. contoh penerapan :

    /* rule akan diterapkan pada sebuah tautan yang belum pernah dikunjungi */
    a:link {
    color: red;
    }
    
    /* rule akan diterapkan pada sebuah tautan yang sudah pernah dikunjungi */
    a:visited {
    color: green;
    }
    
    /* rule akan diterapkan pada sebuah tautan ketika diarahkan dengan kursor */
    a:hover {
    color: pink;
    }
    
    /* rule akan diterapkan pada sebuah tautan ketika ditekan */
    a:active {
    color:orange;
    }

pseudo elemen selector -> selector ini biasa digunakan ketika kita ingin menambahkan sebuah konten tepat sebelum dan setelah sebuah elemen paragraf. Alhasil kita tidak perlu menuliskan struktur elemen tersebut pada berkas HTML. Cukup manfaatkan pseudo-elemen ::before dan ::after kemudian tuliskan konten tersebut cukup pada CSS. Contohnya kita ingin menambahkan tanda kutip sebelum dan sesudah elemen blockquote. Seperti ini cara menuliskannya:
    
    blockquote::before, blockquote::after{
        content:'"';
        font-size:24px;
        font-style:italic;
        font-weight: bold;
    }
    kode ini memberikan content kutip (") di awal dan diakhir dari blockquote.

    /* Rule styling akan diterapkan pada karakter pertama disebuah paragraf */
       p::first-letter {
           font-size: 32px;
           font-weight: bold;
           color: saddlebrown;
       }

ch - > relative to font width 
vw -> view port width
vh -> view port height
ex -> font height
rem -> font size
em -> font size


text styling property:
line-height -> angka di dalamnya akan dikalikan dengan properti font-size
text-indent -> digunakan agar dokumen memiliki jarak di awal paragrafnya. kita dapat menentukan nilai dari properti ini dengan px, em, dan in. 
text-align:(left, right,center, justify)
text-decoration: (underline("garis bawah"), overline("garis atas"),line-trough("tulisan di coret"),none)
text-transform: (none, capitalize, lowercase, uppercase)
latter-spacing : mengatur jarak antar huruf.
word-spacing : mengatur jarak antar kata.
text-shadow : nilai_horizontal, nilai_vertikal, alfa_bayangan, warna_bayangan


external font :
@font-face{
    font-family:"Dicoding Font";
    src : url('FILE-FONT.TTF');
}
source of docs : https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face


google font :
@import url(__google__fonts___);

styling warna :
hsl -> satuan hue saturation light
opacity -> alfa
hsla -> hsl + alfa
rgba -> rgb + alfa

box element -> banyak developer menggunakan satuan em dan persentase ketika membuat web agar bisa disesuai kan berdasarkan ukuran.

untuk membuat content center kita dapat menggunakan :
margin : 0 auto;

width, max-width, min-height , height, max-height, min-height.


overflowing content :
overflow : (visible, hidden, scroll, auto)

box-sizing:
Pada CSS2 ukuran lebar dan panjang elemen mengacu pada konten elemen (content-box). Itu berarti ukuran elemen seluruhnya merupakan nilai panjang dan lebar yang kita spesifikasikan ditambah dengan nilai padding dan border yang diterapkan pada elemen. Hal tersebut membuat sebagian developer menjadi sulit menetapkan ukuran dimensi.

Setelah CSS3 kita dapat memilih tipe pengukuran lain dalam menentukan dimensi elemen. Dengan menggunakan properti box-sizing kita dapat menentukannya berdasarkan border box, di mana ukuran elemen sudah termasuk content, padding dan border. Dengan metode ini, hasil elemen yang ditampilkan (termasuk padding dan border) akan memiliki dimensi yang sama persis seperti yang kita tentukan.

contoh :
.content{ //content-box
    width : 200px;
    height : 200px;
    backgroud-color: black;
    border: 10px solid blue;
    padding : 20px;
    box-sizing : content-box;
}
--> dari kode diatas artinya ukuran width dari elemen content adalah 200px + 20px + 20px + 10px+10px = 260px


.content{//border-box
    width : 200px;
    height : 200px;
    backgroud-color: black;
    border: 10px solid blue;
    padding : 20px;
    box-sizing : border-box;
}
--> dari kode diatas ukuran/width dari content adalah sama dengan ukuran yang ditetapkan oleh user.


div{boder: width style color;}


!!penting ( centering content ) -> margin : 0 auto

elemen memiliki dua tipe blok dan inline !

inline element :
- elemen yang secara default tidak menambahkan baris baru ketika dibuat
- nilai lebar dan itnggi elemen inline sebesar konten di dalamnya, dan tidak dapat diumba.
-Margin dan padding hanya mempengaruhi elemen secara horizontal, tidak vertikal.

block element:
- elemen html secara default menambahkan baris baru ketika dibuat.
- jika tidak diatur lebarnya, lebar dari elemn block akan memenuhi lebar dari browser atau elemen yang manunginya.
- kita dapat mengatur dimensi dari elemen block.
-  didalam elemen bloc, kita dapat menyimpan tag elemen html lainnya.

properti : display: (inline, block, inline-block, none)
inline -> mempertahankan sifat inline element
block -> mempertahankan sifat element block
inline-block -> elemen block tidak membuat baris baru, namun tetap mempertahankan sifat lain dari elemen block.
none -> digunakan untuk menyembunyikan elemen.



box-shadow:
box-shadow: 6px 6px 5px 10px #666666;

.rounded{
    border-radius : 10px -> membuat border

}

margin : top right bottom left



!penting 2
POSITIONING

1. Normal Flow (static flow) -> setiap elemen akan ditampilkan dalam baris baru ketika baru dibuat, mereka tidak dapat bersebelahan meskipun terdapat tempat kosong di sampingnya.

2. Relative positioning -> membuat elemen bisa berpindah ke posisi atas, bawah, kanan, kiri dari posisi seharunya elemn tersebut berada.

3. absolute positioning -> mirip dengan relative. namun posisinya relatif pada jendala browser dan induk elemen selama induk elemen juga berada di luar dari normal flow.

4. fixed positioning -> merupakan absolute positioning namun posisinya selalu relatif terhadap jendela browser, posisinya tidak akan berubah walaupun di scroll.


#non-static flow vs static flow
ada tiga kotak, hijau, biru, dan kuning. kotak tersebut distack berdasarkan hijau ke kuning, setelah itu bila kita mau menambahkan margin pada kotak biru dengan property margin-top : 20px. maka yang terjadi adalah kotak biru terdorong kebawah beserta kotak kuning. hal ini di sebut dengan static flow.

    <!DOCTYPE html>
    <html lang="en">
    <head>
    <meta charset="UTF-8">
    <title>Margin</title>
    <style>
        .box {
            width: 200px;
            height: 200px;
        }

        .first {
            background-color: #60d0a8;
            
        }

        .second {
            background-color: #6495ed;
            margin-top:20px;
        }

        .third {
            background-color: #ffa500;
        }
    </style>
    </head>
    <body>

        <div class="box first"></div>
        <div class="box second"></div>
        <div class="box third"></div>
    </body>
    </html>


non-static flow kebalikan dari static sehingga elemennya tidak menggunakan normal flow. 

note : 
position : realtive -> pada aspek 3d diangkat dari luar static flow. 
top, left, right, bottom hanya berlaku pada elemen non-static flow ( absolute, fixed, relative)

    <!DOCTYPE html>
    <html lang="en">
    <head>
    <meta charset="UTF-8">
    <title>Margin</title>
    <style>
        .box {
            width: 200px;
            height: 200px;
        }

        .first {
            background-color: #60d0a8;
            
        }

        .second {
            background-color: #6495ed;
            margin-top:20px;
            position: relative;
            top: 20px;
            left: 20px;
        }

        .third {
            background-color: #ffa500;
        }
    </style>
    </head>
    <body>

        <div class="box first"></div>
        <div class="box second"></div>
        <div class="box third"></div>
    </body>
    </html>


float tidak dapat dignakan pada position absolute;
elemen yang menerapkan float “tidak dianggap ada” oleh induk elemen yang menaunginya karena jika menggunakan float, elemen akan dikeluarkan dari normal flow.

how to solve ? Terdapat dua cara yang akan kita bahas, yakni dengan pertama, menggunakan properti clear dan kedua, menetapkan nilai overflow: auto pada container

1. Cara yang pertama adalah dengan menggunakan properti clear. Properti clear memang dibuat untuk menghilangkan sifat float, dengan demikian elemen yang menerapkan properti float akan kembali “dianggap ada”. Namun untuk menerapkan properti ini kita perlu membuat sebuah elemen kosong (biasanya menggunakan div tanpa konten) yang menerapkan properti clear.

2. Cara yang kedua adalah dengan menetapkan properti overflow: auto; pada elemen yang menampung elemen float. Sebagian developer lebih memilih menggunakan cara ini karena lebih praktis dan tidak perlu membuat elemen baru ketika menggunakannya.

Flex Container
menampung beberapa flex item, flex child harus memiliki flex container.

flex item secara default ditampilkan secara horizontal.

flex-grow -> membagi ukuran flex-container dengan ukuran pada flex-item.
flex-direction :
    row : merupakan nilai default, di mana deretan flex-item pada container ditampilkan secara horizontal.
    row-reverse : memiliki sifat yang sama seperti row, namun urutan flex item-nya ditukar.
    column : Deretan flex-item pada container ditampilkan secara vertikal.
    column-reverse : memiliki sifat yang sama seperti column, namun urutan flex item-nya ditukar.

